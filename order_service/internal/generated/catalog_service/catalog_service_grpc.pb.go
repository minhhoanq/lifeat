// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: catalog_service/catalog_service.proto

package catalog_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogService_CreateProduct_FullMethodName      = "/catalog.CatalogService/CreateProduct"
	CatalogService_ListProduct_FullMethodName        = "/catalog.CatalogService/ListProduct"
	CatalogService_CreateCart_FullMethodName         = "/catalog.CatalogService/CreateCart"
	CatalogService_AddToCartItem_FullMethodName      = "/catalog.CatalogService/AddToCartItem"
	CatalogService_GetSKU_FullMethodName             = "/catalog.CatalogService/GetSKU"
	CatalogService_GetInventorySKU_FullMethodName    = "/catalog.CatalogService/GetInventorySKU"
	CatalogService_UpdateInventorySKU_FullMethodName = "/catalog.CatalogService/UpdateInventorySKU"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Product service definition
type CatalogServiceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	ListProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductResponse, error)
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error)
	AddToCartItem(ctx context.Context, in *AddToCartItemRequest, opts ...grpc.CallOption) (*AddToCartItemResponse, error)
	GetSKU(ctx context.Context, in *GetSKURequest, opts ...grpc.CallOption) (*GetSKUResponse, error)
	GetInventorySKU(ctx context.Context, in *GetInventorySKURequest, opts ...grpc.CallOption) (*GetInventorySKUResponse, error)
	UpdateInventorySKU(ctx context.Context, in *UpdateInventorySKURequest, opts ...grpc.CallOption) (*UpdateInventorySKUResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_ListProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, CatalogService_CreateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) AddToCartItem(ctx context.Context, in *AddToCartItemRequest, opts ...grpc.CallOption) (*AddToCartItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToCartItemResponse)
	err := c.cc.Invoke(ctx, CatalogService_AddToCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetSKU(ctx context.Context, in *GetSKURequest, opts ...grpc.CallOption) (*GetSKUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSKUResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetSKU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetInventorySKU(ctx context.Context, in *GetInventorySKURequest, opts ...grpc.CallOption) (*GetInventorySKUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventorySKUResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetInventorySKU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateInventorySKU(ctx context.Context, in *UpdateInventorySKURequest, opts ...grpc.CallOption) (*UpdateInventorySKUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInventorySKUResponse)
	err := c.cc.Invoke(ctx, CatalogService_UpdateInventorySKU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility.
//
// Product service definition
type CatalogServiceServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	ListProduct(context.Context, *ListProductRequest) (*ListProductResponse, error)
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error)
	AddToCartItem(context.Context, *AddToCartItemRequest) (*AddToCartItemResponse, error)
	GetSKU(context.Context, *GetSKURequest) (*GetSKUResponse, error)
	GetInventorySKU(context.Context, *GetInventorySKURequest) (*GetInventorySKUResponse, error)
	UpdateInventorySKU(context.Context, *UpdateInventorySKURequest) (*UpdateInventorySKUResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogServiceServer struct{}

func (UnimplementedCatalogServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ListProduct(context.Context, *ListProductRequest) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProduct not implemented")
}
func (UnimplementedCatalogServiceServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCatalogServiceServer) AddToCartItem(context.Context, *AddToCartItemRequest) (*AddToCartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCartItem not implemented")
}
func (UnimplementedCatalogServiceServer) GetSKU(context.Context, *GetSKURequest) (*GetSKUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSKU not implemented")
}
func (UnimplementedCatalogServiceServer) GetInventorySKU(context.Context, *GetInventorySKURequest) (*GetInventorySKUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventorySKU not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateInventorySKU(context.Context, *UpdateInventorySKURequest) (*UpdateInventorySKUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventorySKU not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}
func (UnimplementedCatalogServiceServer) testEmbeddedByValue()                        {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	// If the following call pancis, it indicates UnimplementedCatalogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ListProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListProduct(ctx, req.(*ListProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_AddToCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AddToCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_AddToCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AddToCartItem(ctx, req.(*AddToCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetSKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSKURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetSKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetSKU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetSKU(ctx, req.(*GetSKURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetInventorySKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventorySKURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetInventorySKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetInventorySKU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetInventorySKU(ctx, req.(*GetInventorySKURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateInventorySKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventorySKURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateInventorySKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_UpdateInventorySKU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateInventorySKU(ctx, req.(*UpdateInventorySKURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _CatalogService_CreateProduct_Handler,
		},
		{
			MethodName: "ListProduct",
			Handler:    _CatalogService_ListProduct_Handler,
		},
		{
			MethodName: "CreateCart",
			Handler:    _CatalogService_CreateCart_Handler,
		},
		{
			MethodName: "AddToCartItem",
			Handler:    _CatalogService_AddToCartItem_Handler,
		},
		{
			MethodName: "GetSKU",
			Handler:    _CatalogService_GetSKU_Handler,
		},
		{
			MethodName: "GetInventorySKU",
			Handler:    _CatalogService_GetInventorySKU_Handler,
		},
		{
			MethodName: "UpdateInventorySKU",
			Handler:    _CatalogService_UpdateInventorySKU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog_service/catalog_service.proto",
}
