// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: catalog_service/catalog_service.proto

package catalog_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AttributeValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttributeValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttributeValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttributeValueMultiError,
// or nil if none found.
func (m *AttributeValue) ValidateAll() error {
	return m.validate(true)
}

func (m *AttributeValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeId

	// no validation rules for Value

	if len(errors) > 0 {
		return AttributeValueMultiError(errors)
	}

	return nil
}

// AttributeValueMultiError is an error wrapping multiple validation errors
// returned by AttributeValue.ValidateAll() if the designated constraints
// aren't met.
type AttributeValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeValueMultiError) AllErrors() []error { return m }

// AttributeValueValidationError is the validation error returned by
// AttributeValue.Validate if the designated constraints aren't met.
type AttributeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValueValidationError) ErrorName() string { return "AttributeValueValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValueValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Image

	// no validation rules for CategoryId

	// no validation rules for BrandId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on SKU with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *SKU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SKU with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SKUMultiError, or nil if none found.
func (m *SKU) ValidateAll() error {
	return m.validate(true)
}

func (m *SKU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for Name

	// no validation rules for Slug

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SKUValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SKUValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SKUValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCurrentPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "CurrentPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "CurrentPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SKUValidationError{
				field:  "CurrentPrice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInventory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SKUValidationError{
				field:  "Inventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SKUValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SKUValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SKUValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SKUMultiError(errors)
	}

	return nil
}

// SKUMultiError is an error wrapping multiple validation errors returned by
// SKU.ValidateAll() if the designated constraints aren't met.
type SKUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SKUMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SKUMultiError) AllErrors() []error { return m }

// SKUValidationError is the validation error returned by SKU.Validate if the
// designated constraints aren't met.
type SKUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SKUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SKUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SKUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SKUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SKUValidationError) ErrorName() string { return "SKUValidationError" }

// Error satisfies the builtin error interface
func (e SKUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSKU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SKUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SKUValidationError{}

// Validate checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PriceMultiError, or nil if none found.
func (m *Price) ValidateAll() error {
	return m.validate(true)
}

func (m *Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SkuId

	// no validation rules for OriginalPrice

	if all {
		switch v := interface{}(m.GetEffectiveDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "EffectiveDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "EffectiveDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEffectiveDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "EffectiveDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Active

	if len(errors) > 0 {
		return PriceMultiError(errors)
	}

	return nil
}

// PriceMultiError is an error wrapping multiple validation errors returned by
// Price.ValidateAll() if the designated constraints aren't met.
type PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceMultiError) AllErrors() []error { return m }

// PriceValidationError is the validation error returned by Price.Validate if
// the designated constraints aren't met.
type PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceValidationError) ErrorName() string { return "PriceValidationError" }

// Error satisfies the builtin error interface
func (e PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceValidationError{}

// Validate checks the field values on Inventory with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Inventory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Inventory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InventoryMultiError, or nil
// if none found.
func (m *Inventory) ValidateAll() error {
	return m.validate(true)
}

func (m *Inventory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SkuId

	// no validation rules for Stock

	// no validation rules for Reservations

	if len(errors) > 0 {
		return InventoryMultiError(errors)
	}

	return nil
}

// InventoryMultiError is an error wrapping multiple validation errors returned
// by Inventory.ValidateAll() if the designated constraints aren't met.
type InventoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InventoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InventoryMultiError) AllErrors() []error { return m }

// InventoryValidationError is the validation error returned by
// Inventory.Validate if the designated constraints aren't met.
type InventoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InventoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InventoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InventoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InventoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InventoryValidationError) ErrorName() string { return "InventoryValidationError" }

// Error satisfies the builtin error interface
func (e InventoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInventory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InventoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InventoryValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Image

	// no validation rules for CategoryId

	// no validation rules for BrandId

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProductRequestValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProductRequestValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProductRequestValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on SKUToCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SKUToCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SKUToCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SKUToCreateMultiError, or
// nil if none found.
func (m *SKUToCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *SKUToCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for OriginalPrice

	// no validation rules for InitialStock

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SKUToCreateValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SKUToCreateValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SKUToCreateValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SKUToCreateMultiError(errors)
	}

	return nil
}

// SKUToCreateMultiError is an error wrapping multiple validation errors
// returned by SKUToCreate.ValidateAll() if the designated constraints aren't met.
type SKUToCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SKUToCreateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SKUToCreateMultiError) AllErrors() []error { return m }

// SKUToCreateValidationError is the validation error returned by
// SKUToCreate.Validate if the designated constraints aren't met.
type SKUToCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SKUToCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SKUToCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SKUToCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SKUToCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SKUToCreateValidationError) ErrorName() string { return "SKUToCreateValidationError" }

// Error satisfies the builtin error interface
func (e SKUToCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSKUToCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SKUToCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SKUToCreateValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductRequestMultiError, or nil if none found.
func (m *ListProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListProductRequestMultiError(errors)
	}

	return nil
}

// ListProductRequestMultiError is an error wrapping multiple validation errors
// returned by ListProductRequest.ValidateAll() if the designated constraints
// aren't met.
type ListProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductRequestMultiError) AllErrors() []error { return m }

// ListProductRequestValidationError is the validation error returned by
// ListProductRequest.Validate if the designated constraints aren't met.
type ListProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductRequestValidationError) ErrorName() string {
	return "ListProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductRequestValidationError{}

// Validate checks the field values on ListProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductResponseMultiError, or nil if none found.
func (m *ListProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductResponseMultiError(errors)
	}

	return nil
}

// ListProductResponseMultiError is an error wrapping multiple validation
// errors returned by ListProductResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductResponseMultiError) AllErrors() []error { return m }

// ListProductResponseValidationError is the validation error returned by
// ListProductResponse.Validate if the designated constraints aren't met.
type ListProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductResponseValidationError) ErrorName() string {
	return "ListProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductResponseValidationError{}

// Validate checks the field values on ProductWithSKUs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductWithSKUs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductWithSKUs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductWithSKUsMultiError, or nil if none found.
func (m *ProductWithSKUs) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductWithSKUs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductWithSKUsValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductWithSKUsValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductWithSKUsValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductWithSKUsValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductWithSKUsValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductWithSKUsValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductWithSKUsMultiError(errors)
	}

	return nil
}

// ProductWithSKUsMultiError is an error wrapping multiple validation errors
// returned by ProductWithSKUs.ValidateAll() if the designated constraints
// aren't met.
type ProductWithSKUsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductWithSKUsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductWithSKUsMultiError) AllErrors() []error { return m }

// ProductWithSKUsValidationError is the validation error returned by
// ProductWithSKUs.Validate if the designated constraints aren't met.
type ProductWithSKUsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductWithSKUsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductWithSKUsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductWithSKUsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductWithSKUsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductWithSKUsValidationError) ErrorName() string { return "ProductWithSKUsValidationError" }

// Error satisfies the builtin error interface
func (e ProductWithSKUsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductWithSKUs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductWithSKUsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductWithSKUsValidationError{}

// Validate checks the field values on CreateCartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartRequestMultiError, or nil if none found.
func (m *CreateCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateCartRequestMultiError(errors)
	}

	return nil
}

// CreateCartRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCartRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartRequestMultiError) AllErrors() []error { return m }

// CreateCartRequestValidationError is the validation error returned by
// CreateCartRequest.Validate if the designated constraints aren't met.
type CreateCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartRequestValidationError) ErrorName() string {
	return "CreateCartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartRequestValidationError{}

// Validate checks the field values on CreateCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartResponseMultiError, or nil if none found.
func (m *CreateCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CartId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateCartResponseMultiError(errors)
	}

	return nil
}

// CreateCartResponseMultiError is an error wrapping multiple validation errors
// returned by CreateCartResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartResponseMultiError) AllErrors() []error { return m }

// CreateCartResponseValidationError is the validation error returned by
// CreateCartResponse.Validate if the designated constraints aren't met.
type CreateCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartResponseValidationError) ErrorName() string {
	return "CreateCartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartResponseValidationError{}

// Validate checks the field values on AddToCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddToCartItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddToCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddToCartItemRequestMultiError, or nil if none found.
func (m *AddToCartItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToCartItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddToCartItemRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddToCartItemRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddToCartItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddToCartItemRequestMultiError(errors)
	}

	return nil
}

// AddToCartItemRequestMultiError is an error wrapping multiple validation
// errors returned by AddToCartItemRequest.ValidateAll() if the designated
// constraints aren't met.
type AddToCartItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToCartItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToCartItemRequestMultiError) AllErrors() []error { return m }

// AddToCartItemRequestValidationError is the validation error returned by
// AddToCartItemRequest.Validate if the designated constraints aren't met.
type AddToCartItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToCartItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToCartItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToCartItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToCartItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToCartItemRequestValidationError) ErrorName() string {
	return "AddToCartItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddToCartItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToCartItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToCartItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToCartItemRequestValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CartId

	// no validation rules for SkuId

	// no validation rules for Quantity

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}

// Validate checks the field values on AddToCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddToCartItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddToCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddToCartItemResponseMultiError, or nil if none found.
func (m *AddToCartItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToCartItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CartId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddToCartItemResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddToCartItemResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddToCartItemResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddToCartItemResponseMultiError(errors)
	}

	return nil
}

// AddToCartItemResponseMultiError is an error wrapping multiple validation
// errors returned by AddToCartItemResponse.ValidateAll() if the designated
// constraints aren't met.
type AddToCartItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToCartItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToCartItemResponseMultiError) AllErrors() []error { return m }

// AddToCartItemResponseValidationError is the validation error returned by
// AddToCartItemResponse.Validate if the designated constraints aren't met.
type AddToCartItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToCartItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToCartItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToCartItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToCartItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToCartItemResponseValidationError) ErrorName() string {
	return "AddToCartItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddToCartItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToCartItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToCartItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToCartItemResponseValidationError{}

// Validate checks the field values on GetSKURequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSKURequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSKURequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSKURequestMultiError, or
// nil if none found.
func (m *GetSKURequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSKURequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	if len(errors) > 0 {
		return GetSKURequestMultiError(errors)
	}

	return nil
}

// GetSKURequestMultiError is an error wrapping multiple validation errors
// returned by GetSKURequest.ValidateAll() if the designated constraints
// aren't met.
type GetSKURequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSKURequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSKURequestMultiError) AllErrors() []error { return m }

// GetSKURequestValidationError is the validation error returned by
// GetSKURequest.Validate if the designated constraints aren't met.
type GetSKURequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSKURequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSKURequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSKURequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSKURequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSKURequestValidationError) ErrorName() string { return "GetSKURequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSKURequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSKURequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSKURequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSKURequestValidationError{}

// Validate checks the field values on GetSKUResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSKUResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSKUResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSKUResponseMultiError,
// or nil if none found.
func (m *GetSKUResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSKUResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSku()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSKUResponseValidationError{
					field:  "Sku",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSKUResponseValidationError{
					field:  "Sku",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSku()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSKUResponseValidationError{
				field:  "Sku",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSKUResponseMultiError(errors)
	}

	return nil
}

// GetSKUResponseMultiError is an error wrapping multiple validation errors
// returned by GetSKUResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSKUResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSKUResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSKUResponseMultiError) AllErrors() []error { return m }

// GetSKUResponseValidationError is the validation error returned by
// GetSKUResponse.Validate if the designated constraints aren't met.
type GetSKUResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSKUResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSKUResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSKUResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSKUResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSKUResponseValidationError) ErrorName() string { return "GetSKUResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSKUResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSKUResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSKUResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSKUResponseValidationError{}

// Validate checks the field values on GetInventorySKURequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventorySKURequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventorySKURequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInventorySKURequestMultiError, or nil if none found.
func (m *GetInventorySKURequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventorySKURequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	if len(errors) > 0 {
		return GetInventorySKURequestMultiError(errors)
	}

	return nil
}

// GetInventorySKURequestMultiError is an error wrapping multiple validation
// errors returned by GetInventorySKURequest.ValidateAll() if the designated
// constraints aren't met.
type GetInventorySKURequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventorySKURequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventorySKURequestMultiError) AllErrors() []error { return m }

// GetInventorySKURequestValidationError is the validation error returned by
// GetInventorySKURequest.Validate if the designated constraints aren't met.
type GetInventorySKURequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventorySKURequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventorySKURequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventorySKURequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventorySKURequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventorySKURequestValidationError) ErrorName() string {
	return "GetInventorySKURequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventorySKURequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventorySKURequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventorySKURequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventorySKURequestValidationError{}

// Validate checks the field values on GetInventorySKUResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventorySKUResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventorySKUResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInventorySKUResponseMultiError, or nil if none found.
func (m *GetInventorySKUResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventorySKUResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInventory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInventorySKUResponseValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInventorySKUResponseValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInventorySKUResponseValidationError{
				field:  "Inventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInventorySKUResponseMultiError(errors)
	}

	return nil
}

// GetInventorySKUResponseMultiError is an error wrapping multiple validation
// errors returned by GetInventorySKUResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInventorySKUResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventorySKUResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventorySKUResponseMultiError) AllErrors() []error { return m }

// GetInventorySKUResponseValidationError is the validation error returned by
// GetInventorySKUResponse.Validate if the designated constraints aren't met.
type GetInventorySKUResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventorySKUResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventorySKUResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventorySKUResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventorySKUResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventorySKUResponseValidationError) ErrorName() string {
	return "GetInventorySKUResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventorySKUResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventorySKUResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventorySKUResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventorySKUResponseValidationError{}

// Validate checks the field values on UpdateInventorySKURequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInventorySKURequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventorySKURequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInventorySKURequestMultiError, or nil if none found.
func (m *UpdateInventorySKURequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventorySKURequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	// no validation rules for Quantity

	if len(errors) > 0 {
		return UpdateInventorySKURequestMultiError(errors)
	}

	return nil
}

// UpdateInventorySKURequestMultiError is an error wrapping multiple validation
// errors returned by UpdateInventorySKURequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateInventorySKURequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventorySKURequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventorySKURequestMultiError) AllErrors() []error { return m }

// UpdateInventorySKURequestValidationError is the validation error returned by
// UpdateInventorySKURequest.Validate if the designated constraints aren't met.
type UpdateInventorySKURequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventorySKURequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventorySKURequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventorySKURequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventorySKURequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventorySKURequestValidationError) ErrorName() string {
	return "UpdateInventorySKURequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventorySKURequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventorySKURequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventorySKURequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventorySKURequestValidationError{}

// Validate checks the field values on UpdateInventorySKUResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInventorySKUResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventorySKUResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInventorySKUResponseMultiError, or nil if none found.
func (m *UpdateInventorySKUResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventorySKUResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInventory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInventorySKUResponseValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInventorySKUResponseValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInventorySKUResponseValidationError{
				field:  "Inventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateInventorySKUResponseMultiError(errors)
	}

	return nil
}

// UpdateInventorySKUResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateInventorySKUResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateInventorySKUResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventorySKUResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventorySKUResponseMultiError) AllErrors() []error { return m }

// UpdateInventorySKUResponseValidationError is the validation error returned
// by UpdateInventorySKUResponse.Validate if the designated constraints aren't met.
type UpdateInventorySKUResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventorySKUResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventorySKUResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventorySKUResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventorySKUResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventorySKUResponseValidationError) ErrorName() string {
	return "UpdateInventorySKUResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventorySKUResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventorySKUResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventorySKUResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventorySKUResponseValidationError{}
